# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  
  # the following works, but is an older Ubuntu
  #config.vm.box = "hashicorp/precise64"
  
  # this is a newer one:
  config.vm.box = "ubuntu/xenial64"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. 
  config.vm.network "forwarded_port", guest: 3000, host: 3000

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  config.vm.synced_folder "code", "/home/vagrant/code", id: "apps", :mount_options => ["dmode=777", "fmode=666"]
  config.vm.synced_folder "provision", "/home/vagrant/provision", id: "apps", :mount_options => ["dmode=777", "fmode=666"]	  

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  
  
  config.vm.define ( ENV['machine'] || "devstuff" )

  config.vm.provider "virtualbox" do |vb|
    
    # name the Virtual Box (what appears in the Virtual Box GUI)
    vb.name = ( ENV['machine'] || "devstuff" )
    
    # Customize the amount of memory on the VM:
    vb.memory = "1024"
    vb.cpus = 4
  end
  
  
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

  # Right now, much, much easier to install Ansible at the vm command line
  # after ssh into guest vm -- see "ansible.sh"
  
  # after that, re-provision with the following:
  
#  config.vm.provision "ansible_local" do |ansible|
#        # Custom host vars
#      ansible.host_vars = {
#        "devstuff" => {
#          "ruby_version" =>  "2.6.3",
#          "rails_version" => "6.0.0"
#        }
#      }
#    ansible.playbook = "./provision/playbook.yml"
#    ansible.verbose = true;
#  end

end
